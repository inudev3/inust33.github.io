{"version":3,"file":"component---src-pages-index-tsx-7c63b8a138c0b774a4db.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Main/ProfileImage.tsx","webpack://gatsby-starter-default/./src/components/Main/introduction.tsx","webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\n\nconst ProfileImageWrapper = styled(GatsbyImage)`\n  width: 120px;\n  height: 120px;\n  margin-bottom: 30px;\n  border-radiues: 50px;\n\n  @media (max-width: 768px) {\n    width: 80px;\n    height: 80px;\n  }\n`\ntype ProfileImageProps = {\n  profileImage: IGatsbyImageData\n}\nconst ProfileImage: FunctionComponent<ProfileImageProps> = function ({\n  profileImage,\n}) {\n  return <ProfileImageWrapper image={profileImage} alt=\"Profile Image\" />\n}\nexport default ProfileImage\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport ProfileImage from 'components/Main/ProfileImage'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\n\nconst Background = styled.div`\n  width: 100%;\n  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);\n  color: #ffffff;\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  width: 768px;\n  height: 400px;\n  margin: 0 auto;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    height: 300px;\n    padding: 0 20px;\n  }\n`\nconst SubTitle = styled.div`\n  font-size: 20px;\n  font-weight: 400;\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`\nconst Title = styled.div`\n  margin-top: 5px;\n  font-size: 35px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n  }\n`\ntype IntroductionProps = {\n  profileImage: IGatsbyImageData\n}\nconst Introduction: FunctionComponent<IntroductionProps> = function ({\n  profileImage,\n}) {\n  return (\n    <Background>\n      <Wrapper>\n        <ProfileImage profileImage={profileImage} />\n        <div>\n          <SubTitle>Nice to Meet You,</SubTitle>\n          <Title>I'm a Junior Frontend Developer Inu Jung</Title>\n        </div>\n      </Wrapper>\n    </Background>\n  )\n}\nexport default Introduction\n","import React, { FunctionComponent, ReactNode } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\n\nexport type CategoryListProp = {\n  selectedCategory: string\n  categoryList: {[key:string]:number}\n}\ntype CategoryItemProps = {\n  active: boolean\n}\ntype GatsbyLinkProps = {\n  children: ReactNode\n  className?: string\n  to: string\n} & CategoryItemProps\n\nconst CategoryListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 768px;\n  margin: 100px auto 0;\n  @media (max-width: 768px) {\n    width: 100%;\n    margin-top: 50px;\n    padding: 0 20px;\n  }\n`\n//emotion에서는 styled매개변수로 함수를 넣어도\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\n  <Link {...props} />\n))<CategoryItemProps>`\n  margin-right: 20px;\n  padding: 5px 0;\n  font-size: 18px;\n  cursor: pointer;\n  font-weight: ${({ active }) => (active ? '800' : '400')};\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`\n\nconst CategoryList: FunctionComponent<CategoryListProp> = function ({\n  selectedCategory,\n  categoryList,\n}) {\n  return (\n    <CategoryListWrapper>\n      {Object.entries(categoryList).map(([cat, count]) => (\n        <CategoryItem\n          to={`/?category=${cat}`}\n          active={cat === selectedCategory}\n          key={cat}\n        >\n          {' '}\n          #{cat} ({count})\n        </CategoryItem>\n      ))}\n    </CategoryListWrapper>\n  )\n}\nexport default CategoryList\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { FunctionComponent } from 'react'\nimport { Link } from 'gatsby'\nimport styled from '@emotion/styled'\nimport { PostFrontmatterType } from 'components/Main/PostItem.types'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-bottom: 3px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 20px;\n  font-weight: 700;\n`\nconst Date = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  opacity: 0.7;\n`\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 10px;\n  margin: 10px -5px;\n`\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 5px;\n  border-radius: 3px;\n  background: black;\n  font-size: 14px;\n  font-weight: 700;\n  color: white;\n`\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 16px;\n  opacity: 0.5;\n`\n\nconst PostItemWrapper = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  }\n`\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 200px;\n  border-radius: 10px 10px 0 0;\n`\nconst PostItemContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n`\ntype PostItemProps = PostFrontmatterType & { link: string }\nconst PostItem: FunctionComponent<PostItemProps> = function ({\n  title,\n  date,\n  categories,\n  summary,\n  thumbnail: {\n    childImageSharp: { gatsbyImageData },\n  },\n  link,\n}) {\n  return (\n    <PostItemWrapper to={link}>\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n      <PostItemContent>\n        <Title>{title}</Title>\n        <Date>{date}</Date>\n        <Category>\n          {categories.map(category => (\n            <CategoryItem key={category}>{category}</CategoryItem>\n          ))}\n        </Category>\n        <Summary>{summary}</Summary>\n      </PostItemContent>\n    </PostItemWrapper>\n  )\n}\nexport default PostItem\n","import { PostListItemType } from 'components/Main/PostItem.types'\nimport { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react'\n\nexport type useInfiniteScrollType = {\n  containerRef: MutableRefObject<HTMLDivElement | null>\n  postList: PostListItemType[]\n}\nconst ITEMCOUNTS_PER_PAGE = 10\n\nconst useInfiniteScroll = function (\n  selectedCategory: string,\n  posts: PostListItemType[],\n): useInfiniteScrollType {\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\n    useRef<HTMLDivElement>(null)\n  const observer: MutableRefObject<IntersectionObserver | null> =\n    useRef<IntersectionObserver>(null)\n  const [count, setCount] = useState(1)\n  const filteredPosts = useMemo<PostListItemType[]>(\n    () =>\n      posts.filter(\n        ({\n          node: {\n            frontmatter: { categories },\n          },\n        }) =>\n          selectedCategory === 'All' || categories.includes(selectedCategory),\n      ),\n    [selectedCategory],\n  )\n  useEffect(() => {\n    observer.current = new IntersectionObserver((entries, observer1) => {\n      if (!entries[0].isIntersecting) return\n      setCount(prev => prev + 1) //교차하면 count 증가\n      observer1.unobserve(entries[0].target)\n    })\n  }, [])\n  useEffect(() => setCount(1), [selectedCategory])\n  useEffect(() => {\n    if (\n      ITEMCOUNTS_PER_PAGE * count > filteredPosts.length ||\n      containerRef.current === null ||\n      containerRef.current?.children.length === 0\n    ) {\n      return\n    }\n    const {\n      current: { children },\n    } = containerRef\n    observer.observe(children[children.length - 1]) //가장 마지막 postitem을 관측\n  }, [count, selectedCategory])\n  return {\n    containerRef,\n    postList: filteredPosts.slice(0, count * ITEMCOUNTS_PER_PAGE),\n  }\n}\nexport default useInfiniteScroll\n","import React, { FunctionComponent, useMemo } from 'react'\nimport styled from '@emotion/styled'\nimport PostItem from 'components/Main/PostItem'\nimport { PostListItemType } from 'components/Main/PostItem.types'\nimport useInfiniteScroll, {\n  useInfiniteScrollType,\n} from 'hooks/useInfiniteScroll'\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 768px;\n  margin: 0 auto;\n  padding: 50px 0 100px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 20px;\n  }\n`\n\ntype PostListProps = {\n  posts: PostListItemType[]\n  selectedCategory: string\n}\nconst PostList: FunctionComponent<PostListProps> = function ({\n  posts,\n  selectedCategory,\n}) {\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\n    selectedCategory,\n    posts,\n  )\n\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList.map(\n        ({\n          node: {\n            id,\n            fields: { slug },\n            frontmatter,\n          },\n        }) => (\n          <PostItem {...frontmatter} link={slug} key={id} />\n        ),\n      )}\n    </PostListWrapper>\n  )\n}\nexport default PostList\n","import React, { FunctionComponent, useMemo } from 'react'\n\nimport GlobalStyle from 'components/Common/GlobalStyle'\nimport styled from '@emotion/styled'\nimport Introduction from 'components/Main/introduction'\nimport Footer from 'components/Common/Footer'\nimport CategoryList, { CategoryListProp } from 'components/Main/CategoryList'\nimport PostList from 'components/Main/PostList'\nimport { graphql } from 'gatsby'\nimport { PostListItemType } from 'components/Main/PostItem.types'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport Template from 'components/Common/Template'\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\ntype IndexProp = {\n  location: { search: string }\n  data: {\n    site: {\n      siteMetadata: {\n        title: string\n        description: string\n        siteUrl: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: PostListItemType[]\n    }\n    file: {\n      childImageSharp: { gatsbyImageData: IGatsbyImageData }\n      publicURL: string\n    }\n  }\n}\n\nconst IndexPage: FunctionComponent<IndexProp> = function ({\n  location: { search },\n  data,\n}) {\n  const {\n    site: {\n      siteMetadata: { title, description, siteUrl },\n    },\n    allMarkdownRemark: { edges },\n    file: {\n      childImageSharp: { gatsbyImageData },\n      publicURL,\n    },\n  } = data\n  const parsed: URLSearchParams = new URLSearchParams(search)\n  const categoryParam = parsed.get('category')\n  const selectedCategory: string =\n    typeof categoryParam !== 'string' || !categoryParam ? 'All' : categoryParam\n\n  const categoryList = useMemo(\n    () =>\n      edges.reduce(\n        (list: CategoryListProp['categoryList'], edge) => {\n          const {\n            node: {\n              frontmatter: { categories },\n            },\n          } = edge\n          categories.forEach(category => {\n            if (list[category] === undefined) list[category] = 1\n            else list[category]++\n          })\n          list['All']++\n          return list\n        },\n        { All: 0 },\n      ),\n    [edges],\n  )\n\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n    >\n      <Introduction profileImage={gatsbyImageData} />\n      <CategoryList\n        selectedCategory={selectedCategory}\n        categoryList={categoryList}\n      />\n      <PostList posts={edges} selectedCategory={selectedCategory} />\n    </Template>\n  )\n}\n\nexport default IndexPage\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`\n"],"names":["ProfileImageWrapper","GatsbyImage","profileImage","image","alt","Background","Wrapper","SubTitle","Title","CategoryListWrapper","CategoryItem","active","props","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","selectedCategory","categoryList","entries","map","cat","count","to","Date","Category","Summary","PostItemWrapper","Link","ThumbnailImage","PostItemContent","title","date","categories","summary","gatsbyImageData","thumbnail","childImageSharp","link","category","posts","containerRef","useRef","observer","useState","setCount","filteredPosts","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","observer1","isIntersecting","prev","unobserve","children","observe","postList","slice","PostListWrapper","useInfiniteScroll","ref","id","slug","fields","search","location","data","site","siteMetadata","description","siteUrl","edges","allMarkdownRemark","file","publicURL","categoryParam","URLSearchParams","get","reduce","list","edge","forEach","undefined","All","Template","url"],"sourceRoot":""}